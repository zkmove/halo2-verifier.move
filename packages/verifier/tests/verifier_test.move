#[test_only]
module halo2_verifier::verifier_test {
    use std::bn254_algebra::{G1, FormatG1Uncompr, G2, FormatG2Uncompr};
    use std::option;
    use std::vector;

    use aptos_std::crypto_algebra;

    use halo2_verifier::halo2_verifier;
    use halo2_verifier::params;
    use halo2_verifier::protocol;

    // the following param data is generated from `crates/vk-gen-examples/params/challenge_0078-kzg_bn254_16.srs`
    // they all in uncompressed form.
    #[test_only]
    const TESTING_G1: vector<u8> = x"01000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000";
    #[test_only]
    const TESTING_G2: vector<u8> = x"edf692d95cbdde46ddda5ef7d422436779445c5e66006a42761e1f12efde0018c212f3aeb785e49712e7a9353349aaf1255dfb31b7bf60723a480d9293938e19aa7dfa6601cce64c7bd3430c69e7d1e38f40cb8d8071ab4aeb6d8cdba55ec8125b9722d1dcdaac55f38eb37033314bbc95330c69ad999eec75f05f58d0890609";
    #[test_only]
    const TESTING_S_G2: vector<u8> = x"e4115200acc86e7670c83ded726335def098657fe8668323e9e41e6781b83b0a9d83b54bbb00215323ce6d7f9d7f331a286d7707d03f7dbdd3125c6163588d13ed1abbe32fb3f9c8817d1ae305b395f5ff1db05263b9879602dc18c92e73d916ee07a11fd87eaa69ae764c48f7d618d1d531a4956eed421efcf2491a99769a16";

    #[test(s = @aptos_std)]
    public fun check_verify_ok(s: &signer) {
        crypto_algebra::enable_cryptography_algebra_natives(s);
        let params = params::new(
            option::destroy_some(crypto_algebra::deserialize<G1, FormatG1Uncompr>(&TESTING_G1)),
            option::destroy_some(crypto_algebra::deserialize<G2, FormatG2Uncompr>(&TESTING_G2)),
            option::destroy_some(crypto_algebra::deserialize<G2, FormatG2Uncompr>(&TESTING_S_G2))
        );
        // protocol of example vector-mul
        // generated by `cargo run --release --  --param-path params/challenge_0078-kzg_bn254_16.srs --verifier-address 0xcfae5b6bd579e7aff4274aeca434bb500c024b89c139b545c6eeb27bfafea8c1 build-publish-vk-aptos-txn --example vector-mul -o vk_deployment`
        let protocol = protocol::from_bytes(vector[
            x"0f040b991d2f930e735f0028ac957fb7ab6707474ed4eedbfe4f7cbb391c6f07",
            x"baaa5c0c4c452e320267ee0a90b648c30821c86d8627359fcb32e13deb83ad02",
            x"8703f8f88dac3610100dfbe5bb52498335e94896d2268e0128976bb88e15ec1bd7e110682012410aaebe615ee56d487414c5cdf4edc3ea7c94c18898207f750438eb14dd26e292dc9e41920db4619a83a4b6c5691825d26cc4a33fb29ccd69499a8c64ea83540da5130cd2f098126287ba27fc2f51dd20bc9fc7fe5bdfb3dd51",
            x"10",
            x"01000000",
            x"03000000",
            x"0100000000000000",
            x"0100000000000000",
            x"000000",
            x""
        ],
            vector[
                x"00000000000100000000",
                x"00010000000100000000",
                x"00020000000100000000"
            ],
            vector[
                x"f4000000000100000000"
            ],
            vector[x"ff000000000100000000"],
            vector[
                x"f400000000",
                x"0000000000",
                x"0001000000",
                x"0002000000"
            ],
            vector[
                x"000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430",
                x"0100000000000000000000000000000000000000000000000000000000000000"
            ],
            vector[
                x"0200000000000200000002000000010000000300000001000000010003000000000000000100000001000000010000000300000001000000"
            ],
            vector[],
            vector[]
        );
        let proof_gwc = x"06661ff6e3bd260e8dc4f9096034eaf96782d3fed55ec7fbc5928d2a8de1dd5ce1563c6c4fbc544a0544f957202b6cdcfb0b2e203ba886694a19542d8f749c2d9d0fe09c16f5172e45e48f82f28679649c482ae4baacec0c4d5514711eb4aa255508673b9a378da619ab1d60b24a077e7d4489f19e8b6610542d92ff65bb8d6b5442ab04b452a5199776c980dafb6e6ef641b08ce72c0c1560256b552a2a0520ce48ece7c5dd11faa9945ef0cdaffe033d613b6ee01a9584338a37dc189b6954e0fb075b65df7afa31f16a23fdda32d53accf86e4ab33c64b9237f9c7717326762daa7c924e89622b9a2890ea0156ca39d9c628a8ed55f375fe8f4b68abdb6088af71dd45d783231b4faa779783b65a84835c6c236519f0a38939b5c0228b768bc5d4668208d046fdfcaf5413bcfa53f74de2a61f1ed1fe8431c2737c014080db79cc9cd424cd8131078529850c0ded21a5807d05db2fad9c23474aea774b111911545da9b75a4a67812e017f1347cf6a3f9271c9eec4df98e8579de13d4cc2d4f3c08b8b45a32663c3901e42925168458ebfbf3b6581643e5e04608c0d3471dca54cb9be51eb4e25f06d57c249a26621cedd680079d68de4abdec84fd1a3509776e1e09708970ab57c5106bee4e5e0e51ebd795e8e1a66ff1d9e5e7f2a7591573953d6badc461d33b91975bab8d430f38a373514d6a1366509fe7ae55d0672784920c2053a92f465f0dbc41d5adecf1840ef2c8f67415112d7453ddaaf3631b2207f8f3a917d3e1de062ff184fdd8684327433dd93e3639fdc28b00a5a0772948248a8754af35fc7df9890f9d5bdde4c2396a28362a60fdb51166c9b860332685c17d9e580ee3485756d286a32a6cd81364ab1b49929264856d06392aaa900e44f14f961f1f14e35de6cbf690f445166ce56877c776896e9b94d3f760cfd011de03e0387f359c7ccc9de6ba71a8bb4f0116316aa00e56a04f792d56853add02d7a0c03ff8b5ced61ce8e1792ef035cf39fea4c322a5dd78de3bdc18d5974f06a064d7f5899766ecf2ec5482a52c17cf732e80a615c4498d830527f22eef9a2c990a63d4895d9801a973f512ace8ea66236fcfbe1f02acd7277f22d0a9e6652e0850bd3e164ebb21da674035a210b021735dccb853ea83e6d59bb69284b773043a3d7748334b2c42fcf3f145577aa7ce128403106327b6deee886aed599c7c2068346f4af3a805ec971c6c323d87fe2e2610f615c0ebfa03b516c0b796ad680a3f929d626e5279ac35d1d357911f1c286e796af82eaca91e4c02a78fc6d17a2402339241206bc9b930ecca47d1ced7fb5712192b9b0b60feb69c407d6e3f672985dba3a606ce06bb728e388c39f288350868dbee75f1c8a4f4ef0418eb01074b549dcc9c88c83156da1c9431d6d0c6de731302910e16c9b677b56b7f6e9a0e18a8f7f4a77a6a4064c5881af52c93e0a32de9f9d64ad39936fb85207dafb5b94f";
        let proof_shplonk = x"06661ff6e3bd260e8dc4f9096034eaf96782d3fed55ec7fbc5928d2a8de1dd5ce1563c6c4fbc544a0544f957202b6cdcfb0b2e203ba886694a19542d8f749c2d9d0fe09c16f5172e45e48f82f28679649c482ae4baacec0c4d5514711eb4aa255508673b9a378da619ab1d60b24a077e7d4489f19e8b6610542d92ff65bb8d6b5442ab04b452a5199776c980dafb6e6ef641b08ce72c0c1560256b552a2a0520ce48ece7c5dd11faa9945ef0cdaffe033d613b6ee01a9584338a37dc189b6954e0fb075b65df7afa31f16a23fdda32d53accf86e4ab33c64b9237f9c7717326762daa7c924e89622b9a2890ea0156ca39d9c628a8ed55f375fe8f4b68abdb6088af71dd45d783231b4faa779783b65a84835c6c236519f0a38939b5c0228b768bc5d4668208d046fdfcaf5413bcfa53f74de2a61f1ed1fe8431c2737c014080db79cc9cd424cd8131078529850c0ded21a5807d05db2fad9c23474aea774b111911545da9b75a4a67812e017f1347cf6a3f9271c9eec4df98e8579de13d4cc2d4f3c08b8b45a32663c3901e42925168458ebfbf3b6581643e5e04608c0d3471dca54cb9be51eb4e25f06d57c249a26621cedd680079d68de4abdec84fd1a3509776e1e09708970ab57c5106bee4e5e0e51ebd795e8e1a66ff1d9e5e7f2a7591573953d6badc461d33b91975bab8d430f38a373514d6a1366509fe7ae55d0672784920c2053a92f465f0dbc41d5adecf1840ef2c8f67415112d7453ddaaf3631b2207f8f3a917d3e1de062ff184fdd8684327433dd93e3639fdc28b00a5a0772948248a8754af35fc7df9890f9d5bdde4c2396a28362a60fdb51166c9b860332685c17d9e580ee3485756d286a32a6cd81364ab1b49929264856d06392aaa900e44f14f961f1f14e35de6cbf690f445166ce56877c776896e9b94d3f760cfd011de03e0387f359c7ccc9de6ba71a8bb4f0116316aa00e56a04f792d56853add02d7a0c03ff8b5ced61ce8e1792ef035cf39fea4c322a5dd78de3bdc18d5974f06a064d7f5899766ecf2ec5482a52c17cf732e80a615c4498d830527f22eef9a2c990a63d4895d9801a973f512ace8ea66236fcfbe1f02acd7277f22d0a9e6652e0850bd3e164ebb21da674035a210b021735dccb853ea83e6d59bb69284b773043a3d7748334b2c42fcf3f145577aa7ce128403106327b6deee886aed599c7c2068346f4af3a805ec971c6c323d87fe2e2610f615c0ebfa03b516c0b796ad680a3f929d626e5279ac35d1d357911f1c286e796af82eaca91e4c02a78fc6d17a2402339241206bc9b930ecca47d1ced7fb5712192b9b0b60feb69c407d6e3f67295043053f254006e041bf6fc17135477bde7daa18261c6134e68c556aa219d52c7cd7b0327a38c6a687b3209b0ef8479597c547387df15142bac9865a91f7796e";
        let instances = vector[
            x"0600000000000000000000000000000000000000000000000000000000000000",
            x"0600000000000000000000000000000000000000000000000000000000000000",
            x"0600000000000000000000000000000000000000000000000000000000000000"
        ];
        let result = halo2_verifier::verify_single(&params, &protocol, vector::singleton(instances), proof_gwc, 1);
        assert!(result, 100);
        let result = halo2_verifier::verify_single(&params, &protocol, vector::singleton(instances), proof_shplonk, 0);
        assert!(result, 101);
    }
}
