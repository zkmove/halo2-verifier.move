#[test_only]
module verifier_api::verifier_api_test {
    use std::vector;
    use aptos_std::crypto_algebra;
    use verifier_api::param_store;
    use std::signer;
    use std::unit_test;
    use verifier_api::verifier_api;

    // the following param data is generated from `crates/vk-gen-examples/params/challenge_0078-kzg_bn254_16.srs`
    // they all in compressed form of arkworks
    #[test_only]
    const TESTING_G1: vector<u8> = x"0100000000000000000000000000000000000000000000000000000000000000";
    #[test_only]
    const TESTING_G2: vector<u8> = x"edf692d95cbdde46ddda5ef7d422436779445c5e66006a42761e1f12efde0018c212f3aeb785e49712e7a9353349aaf1255dfb31b7bf60723a480d9293938e19";
    #[test_only]
    const TESTING_S_G2: vector<u8> = x"e4115200acc86e7670c83ded726335def098657fe8668323e9e41e6781b83b0a9d83b54bbb00215323ce6d7f9d7f331a286d7707d03f7dbdd3125c6163588d13";

    #[test(s = @aptos_std)]
    public fun check_verify_ok(s: &signer) {
        crypto_algebra::enable_cryptography_algebra_natives(s);
        let signers = unit_test::create_signers_for_testing(1);
        let signer = vector::pop_back(&mut signers);
        param_store::create(&signer, TESTING_G1, TESTING_G2, TESTING_S_G2);
        // protocol of example vector-mul
        // generated by `cargo run --release --  --param-path params/challenge_0078-kzg_bn254_16.srs --verifier-address 0xcfae5b6bd579e7aff4274aeca434bb500c024b89c139b545c6eeb27bfafea8c1 build-publish-vk-aptos-txn --example vector-mul -o vk_deployment`
        verifier_api::publish_circuit(&signer,vector[
            x"0f040b991d2f930e735f0028ac957fb7ab6707474ed4eedbfe4f7cbb391c6f07",
            x"baaa5c0c4c452e320267ee0a90b648c30821c86d8627359fcb32e13deb83ad02",
            x"8703f8f88dac3610100dfbe5bb52498335e94896d2268e0128976bb88e15ec1bd7e110682012410aaebe615ee56d487414c5cdf4edc3ea7c94c18898207f750438eb14dd26e292dc9e41920db4619a83a4b6c5691825d26cc4a33fb29ccd69499a8c64ea83540da5130cd2f098126287ba27fc2f51dd20bc9fc7fe5bdfb3dd51",
            x"10",
            x"01000000",
            x"03000000",
            x"0100000000000000",
            x"0100000000000000",
            x"000000",
            x""
        ],
            vector[
                x"00000000000100000000",
                x"00010000000100000000",
                x"00020000000100000000"
            ],
            vector[
                x"f4000000000100000000"
            ],
            vector[x"ff000000000100000000"],
            vector[
                x"f400000000",
                x"0000000000",
                x"0001000000",
                x"0002000000"
            ],
            vector[
                x"000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430",
                x"0100000000000000000000000000000000000000000000000000000000000000"
            ],
            vector[
                x"0200000000000200000002000000010000000300000001000000010003000000000000000100000001000000010000000300000001000000"
            ],
            vector[],
            vector[],
            vector[],
            vector[]
        );
        let proof = x"06661ff6e3bd260e8dc4f9096034eaf96782d3fed55ec7fbc5928d2a8de1dd5ce1563c6c4fbc544a0544f957202b6cdcfb0b2e203ba886694a19542d8f749c2d9d0fe09c16f5172e45e48f82f28679649c482ae4baacec0c4d5514711eb4aa255508673b9a378da619ab1d60b24a077e7d4489f19e8b6610542d92ff65bb8d6b5442ab04b452a5199776c980dafb6e6ef641b08ce72c0c1560256b552a2a0520ce48ece7c5dd11faa9945ef0cdaffe033d613b6ee01a9584338a37dc189b6954e0fb075b65df7afa31f16a23fdda32d53accf86e4ab33c64b9237f9c7717326717ecb8a5f8dcba798cb4706badbf1e2816921a2b14773e2421b18fb8e9e5004e23c79f2df17f131018a9b0043d6583779d740aa5df3da4076942d7e82e9f7a46b737c901814134214beda0ebb34a512dee5929153286f57c7dbab5e4ef738640d2f0b3401061c36c6eadb63c55aaa3357d0e593c6a7860f3a570c618a604871aa83767b4cb569b4cd16cb0ae0740cb6ebbcf6f18fd825430c1caaadb6805650d2cca4df11456e2853f2356b5307b523030a82b13582a0377076657bc1294492b5a6328fc5d9320b2c5ce1792d8b401e4382a1fdb0deadc5cdd447847d6b3b02b0bfd442c0c7db984d0d870967335e53f531b9139e6ec7df43f601a5258d3a016e94a45148d1cfd60395aa986e5c2c4bb8692aa57045c6f772829084bd69f65214f5434f2de996df3559d95f5048cd5a60349f00fa9c22310fc9970e23053f32d0717727826b697a042ae376557dfc4dd3830038888488e5a21d5ac7f9cf30025b912e075fa88e2ee505b178e122f63ee4c7219bd82d7fb80918f914f50b9e11cd89b4365123a7d8beb4529c371f102c03ca22a994e67ebd4ec2401703d33101d242d591ac833fc91c152aea87ae65d81d1c5d1bdd50901d2430dd3b38b1d4c0e091b929d16ded653eceb1de9ca6f3a53b0f8411906d48c796927e728003c81185015ceb7ca4f7fa5d8ef02f6864f1804b408261400ed716f0b05a33fead5e2233c0ca6d4c131ba8221d364ebaa9583375168c925e2fe9bbf98ff93fa2de3ec295d4f780f7df328d6012abcfa37ffe0f185bbe12e470e1ba71e663c581adab7129d8e7a313d1ca418b1f1d35d5dc9229a10bf3f7c560570f591da67f02194ac09332bd46942c8c4127ae6cc33bcef1515d1de2c84e46e1d12876cd44fbcb6c30f872e14bf0c7cfb3376603e2811898c5f9776b200f601fcc2de97fcd25e89c206c15744f748146054424611186f4e97485032fb74de6a770fd7489d3e89a7550092f1f97e9048a549c3f9ef2d618c002a5722c8a50f9f614a05284fd27a41771f828688983206e1c96c71db5544f0ece50eda4adfa3219355e1be504bf454f022f85eb36928354ef1c2a4d9cc891273f46f30c672342b81a76b1edf4571557d1c38326379583844110da99a079f256a8b8f5ab1b43ce7a03e12ddda4530a5ff61";
        let instances = vector[
            x"0600000000000000000000000000000000000000000000000000000000000000",
            x"0600000000000000000000000000000000000000000000000000000000000000",
            x"0600000000000000000000000000000000000000000000000000000000000000"
        ];
         verifier_api::verify_proof_gwc(signer::address_of(&signer), signer::address_of(&signer),  vector::singleton(instances), proof);
    }

    #[test(s = @aptos_std)]
    public fun check_verify_shuffle_api_ok(s: &signer) {
        crypto_algebra::enable_cryptography_algebra_natives(s);
        let signers = unit_test::create_signers_for_testing(1);
        let signer = vector::pop_back(&mut signers);
        param_store::create(&signer, TESTING_G1, TESTING_G2, TESTING_S_G2);
        // protocol of example shuffle-api
        // generated by `cargo run --release -- --param-path params/challenge_0078-kzg_bn254_16.srs --verifier-address c5be6b4d9ca3f9bfbf4edd9a3cf434f2b136df23b69b66306e6a2d0378c34458 build-publish-vk-aptos-txn --example shuffle-api -o vk_deployment`
        
        verifier_api::publish_circuit(&signer,
            vector[
                x"5ed91716521c30ca9c8322f2908211f5f1b6bb9bf47ee7439f9df6aac933dd2c",
                x"bce0ce37c00b841d90697913f3b1653d3281fbc05a8f106075edd4597b138d0b74c80ac6072406d2d0ffba6dc4919f0fd1d570e6ace1a812bfa5d44a406a6a6374c80ac6072406d2d0ffba6dc4919f0fd1d570e6ace1a812bfa5d44a406a6a63",
                x"",
                x"10",
                x"01000000",
                x"04000000",
                x"0300000000000000",
                x"0000000000000000",
                x"000000",
                x""
            ],
            vector[
                x"00000000000100000000",
                x"00010000000100000000",
                x"00020000000100000000"
            ],
            vector[],
            vector[
                x"ff000000000100000000",
                x"ff010000000100000000",
                x"ff020000000100000000",
            ],
            vector[],
            vector[
                x"0100000000000000000000000000000000000000000000000000000000000000"
            ],
            vector[],
            vector[],
            vector[],
            vector[
                x"020000001a00000001000000000002000000000000000100000005000000010000001a0000000100000000000200000003000000010000000500000001000000"
            ],
            vector[
                x"020000001a00000001000000000002000000010000000100000004000000010000001a0000000100000000000200000002000000010000000400000001000000"
            ],
        );
        let proof = x"47e4688418f21da809dac262edf7975752d4193026b7858bd1949d67cbaf2242e90550f0211090a27c12a9ee7f41ca20be7ce3716993cdcd484bfec41f72e4003811bb70c6380e3333369277c49142f92041125372e2b10f961359f066ac9c4ccb2958288fc1a3ea7527f6bce63fc137496968c60b675a1b59ac93ac1a87a9146d8294889130db0b9d9e3e995b9676c2254cfb58672e39d7948cea3c33cfba44521a54fcc4d14b5525cc4a6ae7e39a25cd6f861473f5a9fd36a2a260f5636a192936b7cfc47b57a291054a0e1e8a3204c848bd00536c52d408ae6498054ac542189fc6e2dd2c011a5cc87f8e63016efb347f6097f4158fe19b1a5be70e07745659dddeea83fb47b26940fccfd0374150c4ea369e7dd44236c83256f127a35c218f4dbadbc38b0370608f4655b22f3487d748b09d063f4412ca5c8ef98855c0168c5048324febb92fb0e7201ffc62bf778e294ae041993decd2d1b56b0401ba0686d41b1718203e2103ea91b27059af95a0f0fd600aca2cdbfe5df953ef46b71e7c7b729d96365f2262b08840a67d3b2eb8974168639b7e3f3983890226f4830b7c7b729d96365f2262b08840a67d3b2eb8974168639b7e3f3983890226f4830b9143926c963976cc739a98af4138c679327f6013d16ab6067c11324bdc2e8e0b4c08d556023705ca21dfa6e8fe49e3c5432b3468dd9e8faf7dd9b20b4273950e50a01d2414610095c7fb53084b4c4ed6c7f34a629517223a20360d235e24db1aea988edfc997162778180b65144f31c74d18068b43e1244f908e2aabf0cc631f2cb6f5c44abb01ff47083ca0d68d3704bb342eeb56c9fc6ba6dd9fc1d39e7705";
        let instances = vector[];
         verifier_api::verify_proof_gwc(signer::address_of(&signer), signer::address_of(&signer),  vector::singleton(instances), proof);
    }

}
