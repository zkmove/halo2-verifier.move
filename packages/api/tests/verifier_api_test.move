#[test_only]
module verifier_api::verifier_api_test {
    use std::vector;
    use aptos_std::crypto_algebra;
    use verifier_api::param_store;
    use std::signer;
    use std::unit_test;
    use verifier_api::verifier_api;

    // the following param data is generated from `crates/vk-gen-examples/params/challenge_0078-kzg_bn254_16.srs`
    // they all in compressed form of arkworks
    #[test_only]
    const TESTING_G1: vector<u8> = x"0100000000000000000000000000000000000000000000000000000000000000";
    #[test_only]
    const TESTING_G2: vector<u8> = x"edf692d95cbdde46ddda5ef7d422436779445c5e66006a42761e1f12efde0018c212f3aeb785e49712e7a9353349aaf1255dfb31b7bf60723a480d9293938e19";
    #[test_only]
    const TESTING_S_G2: vector<u8> = x"e4115200acc86e7670c83ded726335def098657fe8668323e9e41e6781b83b0a9d83b54bbb00215323ce6d7f9d7f331a286d7707d03f7dbdd3125c6163588d13";
    #[test(s = @aptos_std)]
    public fun check_verify_ok(s: &signer) {
        crypto_algebra::enable_cryptography_algebra_natives(s);
        let signers = unit_test::create_signers_for_testing(1);
        let signer = vector::pop_back(&mut signers);
        param_store::create(&signer, TESTING_G1, TESTING_G2, TESTING_S_G2);
        // protocol of example shuffle-api
        // generated by `cargo run --release -- --param-path params/challenge_0078-kzg_bn254_16.srs --verifier-address c5be6b4d9ca3f9bfbf4edd9a3cf434f2b136df23b69b66306e6a2d0378c34458 build-publish-vk-aptos-txn --example shuffle-api -o vk_deployment`
        
        verifier_api::publish_circuit(&signer,
            vector[
                x"5ed91716521c30ca9c8322f2908211f5f1b6bb9bf47ee7439f9df6aac933dd2c",
                x"bce0ce37c00b841d90697913f3b1653d3281fbc05a8f106075edd4597b138d0b74c80ac6072406d2d0ffba6dc4919f0fd1d570e6ace1a812bfa5d44a406a6a6374c80ac6072406d2d0ffba6dc4919f0fd1d570e6ace1a812bfa5d44a406a6a63",
                x"",
                x"10",
                x"01000000",
                x"04000000",
                x"0300000000000000",
                x"0000000000000000",
                x"000000",
                x""
            ],
            vector[
                x"00000000000100000000",
                x"00010000000100000000",
                x"00020000000100000000"
            ],
            vector[],
            vector[
                x"ff000000000100000000",
                x"ff010000000100000000",
                x"ff020000000100000000",
            ],
            vector[],
            vector[
                x"0100000000000000000000000000000000000000000000000000000000000000"
            ],
            vector[],
            vector[],
            vector[],
            vector[
                x"020000001a00000001000000000002000000000000000100000005000000010000001a0000000100000000000200000003000000010000000500000001000000"
            ],
            vector[
                x"020000001a00000001000000000002000000010000000100000004000000010000001a0000000100000000000200000002000000010000000400000001000000"
            ],
        );
        let proof = x"47e4688418f21da809dac262edf7975752d4193026b7858bd1949d67cbaf2242e90550f0211090a27c12a9ee7f41ca20be7ce3716993cdcd484bfec41f72e4003811bb70c6380e3333369277c49142f92041125372e2b10f961359f066ac9c4ccb2958288fc1a3ea7527f6bce63fc137496968c60b675a1b59ac93ac1a87a9146d8294889130db0b9d9e3e995b9676c2254cfb58672e39d7948cea3c33cfba44521a54fcc4d14b5525cc4a6ae7e39a25cd6f861473f5a9fd36a2a260f5636a192936b7cfc47b57a291054a0e1e8a3204c848bd00536c52d408ae6498054ac542189fc6e2dd2c011a5cc87f8e63016efb347f6097f4158fe19b1a5be70e07745659dddeea83fb47b26940fccfd0374150c4ea369e7dd44236c83256f127a35c218f4dbadbc38b0370608f4655b22f3487d748b09d063f4412ca5c8ef98855c0168c5048324febb92fb0e7201ffc62bf778e294ae041993decd2d1b56b0401ba0686d41b1718203e2103ea91b27059af95a0f0fd600aca2cdbfe5df953ef46b71e7c7b729d96365f2262b08840a67d3b2eb8974168639b7e3f3983890226f4830b7c7b729d96365f2262b08840a67d3b2eb8974168639b7e3f3983890226f4830b9143926c963976cc739a98af4138c679327f6013d16ab6067c11324bdc2e8e0b4c08d556023705ca21dfa6e8fe49e3c5432b3468dd9e8faf7dd9b20b4273950e50a01d2414610095c7fb53084b4c4ed6c7f34a629517223a20360d235e24db1aea988edfc997162778180b65144f31c74d18068b43e1244f908e2aabf0cc631f2cb6f5c44abb01ff47083ca0d68d3704bb342eeb56c9fc6ba6dd9fc1d39e7705";
        let instances = vector[];
         verifier_api::verify_proof_gwc(signer::address_of(&signer), signer::address_of(&signer),  vector::singleton(instances), proof);
    }

}
